
import React, { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { useReminderRules } from '@/hooks/use-reminder-rules';
import { toast } from 'sonner';
import { ReminderRule, NotificationChannel } from '@/types/notification';

interface ReminderRuleFormProps {
  editRule?: ReminderRule | null;
  onComplete?: () => void;
}

const ReminderRuleForm: React.FC<ReminderRuleFormProps> = ({
  editRule = null,
  onComplete
}) => {
  const { saveRule } = useReminderRules();
  
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [triggerType, setTriggerType] = useState('days_before_expiry');
  const [triggerValue, setTriggerValue] = useState<number>(7);
  const [message, setMessage] = useState('');
  const [targetType, setTargetType] = useState('all_members');
  const [active, setActive] = useState(true);
  const [channels, setChannels] = useState<NotificationChannel[]>(['in-app' as NotificationChannel]);
  const [targetRoles, setTargetRoles] = useState<string[]>(['member']);
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  useEffect(() => {
    if (editRule) {
      setName(editRule.title || '');
      setDescription(editRule.description || '');
      setTriggerType(editRule.trigger_type || '');
      setTriggerValue(editRule.trigger_value || 7);
      setMessage(editRule.message || '');
      setTargetType('all_members'); // Default value as it may not exist in DB
      setActive(editRule.is_active || false);
      setChannels(editRule.send_via || ['app']);
      setTargetRoles(editRule.target_roles || ['member']);
    }
  }, [editRule]);
  
  const availableChannels = [
    { id: 'app', label: 'In-App Notification' },
    { id: 'email', label: 'Email' },
    { id: 'sms', label: 'SMS' },
    { id: 'whatsapp', label: 'WhatsApp' }
  ];
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!name.trim()) {
      toast.error('Please provide a name for the reminder rule');
      return;
    }
    
    if (!message.trim()) {
      toast.error('Please provide a message template');
      return;
    }
    
    if (channels.length === 0) {
      toast.error('Please select at least one communication channel');
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      const ruleData: Partial<ReminderRule> = {
        id: editRule?.id, // Include id if editing
        title: name,
        description,
        trigger_type: triggerType,
        trigger_value: triggerValue,
        message,
        conditions: {},
        is_active: active,
        target_roles: targetRoles,
        send_via: channels,
      };
      
      let success;
      
      if (editRule?.id) {
        // Make sure we have a complete ReminderRule
        const completeRule: ReminderRule = {
          ...ruleData,
          id: editRule.id,
          notification_channel: '',
          created_at: editRule.created_at,
          updated_at: new Date().toISOString(),
          triggerType: triggerType, // For backward compatibility
          triggerValue: triggerValue, // For backward compatibility
          isActive: active, // For backward compatibility
          active: active, // For backward compatibility
          targetRoles: targetRoles, // For backward compatibility
          sendVia: channels, // For backward compatibility
          channels: channels // For backward compatibility
        } as ReminderRule;
        success = await saveRule(completeRule);
      } else {
        // For new rules, create a complete object with all required fields
        const newRule: ReminderRule = {
          ...ruleData,
          id: '', // This will be generated by the backend
          notification_channel: '',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          triggerType: triggerType, // For backward compatibility
          triggerValue: triggerValue, // For backward compatibility
          isActive: active, // For backward compatibility
          active: active, // For backward compatibility
          targetRoles: targetRoles, // For backward compatibility
          sendVia: channels, // For backward compatibility
          channels: channels // For backward compatibility
        } as ReminderRule;
        success = await saveRule(newRule);
      }
      
      if (success) {
        toast.success(editRule ? 'Reminder rule updated successfully' : 'Reminder rule created successfully');
        if (onComplete) {
          onComplete();
        }
      } else {
        toast.error('Failed to save reminder rule');
      }
    } catch (error) {
      console.error('Error saving reminder rule:', error);
      toast.error('An error occurred while saving the reminder rule');
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const handleToggleChannel = (channelId: string) => {
    if (channels.includes(channelId)) {
      setChannels(channels.filter(id => id !== channelId));
    } else {
      setChannels([...channels, channelId]);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="space-y-4">
        <div>
          <Label htmlFor="rule-name">Rule Name</Label>
          <Input
            id="rule-name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            placeholder="Name for this reminder rule"
            required
          />
        </div>
        
        <div>
          <Label htmlFor="rule-description">Description (Optional)</Label>
          <Textarea
            id="rule-description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="Short description of what this rule does"
            rows={2}
          />
        </div>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <Label htmlFor="trigger-type">Trigger Type</Label>
            <Select value={triggerType} onValueChange={setTriggerType}>
              <SelectTrigger>
                <SelectValue placeholder="Select trigger" />
              </SelectTrigger>
              <SelectContent className="max-h-[300px]">
                <SelectItem value="days_before_expiry">Days Before Membership Expiry</SelectItem>
                <SelectItem value="days_after_joining">Days After Joining</SelectItem>
                <SelectItem value="days_of_absence">Days of Absence</SelectItem>
                <SelectItem value="birthday">Birthday</SelectItem>
                <SelectItem value="class_reminder">Class Reminder</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <div>
            <Label htmlFor="trigger-value">Trigger Value</Label>
            <Input
              id="trigger-value"
              type="number"
              value={triggerValue}
              onChange={(e) => setTriggerValue(Number(e.target.value))}
              min={0}
              max={365}
              required
            />
          </div>
        </div>
        
        <div>
          <Label htmlFor="target-type">Target Recipients</Label>
          <Select value={targetType} onValueChange={setTargetType}>
            <SelectTrigger>
              <SelectValue placeholder="Select recipients" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all_members">All Members</SelectItem>
              <SelectItem value="active_members">Active Members Only</SelectItem>
              <SelectItem value="inactive_members">Inactive Members</SelectItem>
              <SelectItem value="expiring_members">Expiring Members</SelectItem>
              <SelectItem value="new_members">New Members</SelectItem>
            </SelectContent>
          </Select>
        </div>
        
        <div>
          <Label htmlFor="message-template">Message Template</Label>
          <Textarea
            id="message-template"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            placeholder="Template for the reminder message"
            rows={4}
            required
          />
          <p className="text-sm text-muted-foreground mt-2">
            Use {'{name}'} for member name, {'{days}'} for days value, {'{date}'} for formatted date
          </p>
        </div>
        
        <div>
          <Label className="mb-2 block">Communication Channels</Label>
          <div className="grid grid-cols-1 xs:grid-cols-2 gap-2">
            {availableChannels.map((channel) => (
              <div key={channel.id} className="flex items-center space-x-2">
                <Checkbox 
                  id={`channel-${channel.id}`} 
                  checked={channels.includes(channel.id)}
                  onCheckedChange={() => handleToggleChannel(channel.id)}
                />
                <Label htmlFor={`channel-${channel.id}`} className="text-sm">{channel.label}</Label>
              </div>
            ))}
          </div>
        </div>
        
        <div className="flex items-center space-x-2">
          <Checkbox 
            id="active" 
            checked={active} 
            onCheckedChange={(checked) => setActive(checked === true)}
          />
          <Label htmlFor="active">Rule is active</Label>
        </div>
      </div>
      
      <div className="flex flex-col sm:flex-row sm:justify-end sm:space-x-2">
        <Button type="submit" disabled={isSubmitting} className="w-full sm:w-auto">
          {isSubmitting ? 'Saving...' : editRule ? 'Update Rule' : 'Create Rule'}
        </Button>
      </div>
    </form>
  );
};

export default ReminderRuleForm;
