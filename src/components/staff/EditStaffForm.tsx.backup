import React, { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage, } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { supabase } from '@/services/api/supabaseClient';
import { toast } from 'sonner';
import { Loader2, User, ChevronDown, ChevronUp } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";

// Define the StaffMember type based on profiles table
interface StaffMember {
  id: string;
  full_name: string;
  email: string;
  phone?: string;
  role: string;
  department?: string;
  branch_id?: string;
  avatar_url?: string;
  is_active: boolean;
  id_type?: string;
  id_number?: string;
  gender?: string;
  address?: string;
  city?: string;
  state?: string;
  country?: string;
  is_branch_manager?: boolean;
  created_at?: string;
  updated_at?: string;
}

interface EditStaffFormProps {
  staffId: string;
  onSuccess: () => void;
  onCancel: () => void;
  isSubmitting?: boolean;
}

type FormData = Omit<StaffMember, 'id' | 'created_at' | 'updated_at'> & {
  id: string;
};

const EditStaffForm: React.FC<EditStaffFormProps> = ({ 
  staffId, 
  onSuccess, 
  onCancel, 
  isSubmitting: propIsSubmitting = false 
}) => {
  const [isLoading, setIsLoading] = useState(true);
  const [formData, setFormData] = useState<Partial<StaffMember>>({
    id: '',
    full_name: '',
    email: '',
    phone: '',
    role: 'staff',
    department: '',
    address: '',
    city: '',
    state: '',
    country: '',
    id_type: '',
    id_number: '',
    gender: '',
    is_branch_manager: false,
    is_active: true,
    avatar_url: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(propIsSubmitting);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [avatarFile, setAvatarFile] = useState<File | null>(null);
  const [avatarPreview, setAvatarPreview] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  const departmentOptions = [
    'Administration',
    'Fitness',
    'Yoga',
    'CrossFit',
    'Maintenance',
    'Front Desk',
    'Management',
    'Other'
  ];

  useEffect(() => {
    const fetchStaff = async () => {
      try {
        setIsLoading(true);
        const { data: staff, error } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', staffId)
          .single();

        if (error) throw error;
        
        if (staff) {
          setFormData({
            id: staff.id || '',
            full_name: staff.full_name || '',
            email: staff.email || '',
            phone: staff.phone || '',
            role: staff.role || 'staff',
            department: staff.department || '',
            address: staff.address || '',
            city: staff.city || '',
            state: staff.state || '',
            country: staff.country || '',
            id_type: staff.id_type || '',
            id_number: staff.id_number || '',
            gender: staff.gender || '',
            is_branch_manager: staff.is_branch_manager || false,
            is_active: staff.is_active !== undefined ? staff.is_active : true
          });
        }
      } catch (error) {
        console.error('Error fetching staff member:', error);
        toast.error('Failed to load staff member data');
      } finally {
        setIsLoading(false);
      }
    };

    if (staffId) {
      fetchStaff();
    }
  }, [staffId]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleDepartmentChange = (value: string) => {
    setFormData(prev => ({
      ...prev,
      department: value
    }));
  };

  const handleSwitchChange = (checked: boolean, field: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: checked
    }));
  };

  const handleAvatarChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setAvatarFile(file);
      setAvatarPreview(URL.createObjectURL(file));
    }
  };

  const handleRemoveAvatar = () => {
    setAvatarFile(null);
    setAvatarPreview(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
    setFormData(prev => ({
      ...prev,
      avatar_url: ''
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (isSubmitting) return;
    
    setIsSubmitting(true);

    try {
      let avatarUrl = formData.avatar_url || '';

      // Upload new avatar if file is selected
      if (avatarFile) {
        setIsUploading(true);
        const fileExt = avatarFile.name.split('.').pop();
        const fileName = `${uuidv4()}.${fileExt}`;
        const filePath = `avatars/${fileName}`;

        const { error: uploadError } = await supabase.storage
          .from('staff-avatars')
          .upload(filePath, avatarFile);

        if (uploadError) throw uploadError;

        // Get the public URL
        const { data: { publicUrl } } = supabase.storage
          .from('staff-avatars')
          .getPublicUrl(filePath);

        avatarUrl = publicUrl;
      }

      // Update staff member with new data
      const updates: Partial<StaffMember> = {
        ...formData,
        avatar_url: avatarUrl,
        updated_at: new Date().toISOString()
      };

      const { error } = await supabase
        .from('profiles')
        .update(updates)
        .eq('id', staffId);

      if (error) throw error;

      toast.success('Staff member updated successfully');
      onSuccess();
    } catch (error: unknown) {
      console.error('Error updating staff member:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to update staff member';
      toast.error(errorMessage);
    } finally {
      setIsSubmitting(false);
      setIsUploading(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {/* Avatar Upload Section */}
      <div className="flex flex-col items-center mb-8">
        <div className="relative group">
          <div className="h-32 w-32 rounded-full overflow-hidden border-2 border-gray-200 dark:border-gray-700">
            {avatarPreview || formData.avatar_url ? (
              <img 
                src={avatarPreview || formData.avatar_url} 
                alt={formData.full_name || 'Staff avatar'} 
                className="h-full w-full object-cover"
              />
            ) : (
              <div className="h-full w-full bg-muted flex items-center justify-center">
                <User className="h-16 w-16 text-muted-foreground" />
              </div>
            )}
          </div>
          <label 
            htmlFor="avatar-upload" 
            className="absolute bottom-0 right-0 bg-primary text-white p-2 rounded-full cursor-pointer hover:bg-primary/90 transition-colors"
            title="Upload new avatar"
          >
            <Upload className="h-4 w-4" />
            <input
              id="avatar-upload"
              type="file"
              ref={fileInputRef}
              accept="image/*"
              className="hidden"
              onChange={handleAvatarChange}
            />
          </label>
          {(avatarPreview || formData.avatar_url) && (
            <button
              type="button"
              onClick={handleRemoveAvatar}
              className="absolute top-0 right-0 bg-destructive text-white p-2 rounded-full hover:bg-destructive/90 transition-colors"
              title="Remove avatar"
            >
              <X className="h-4 w-4" />
            </button>
          )}
        </div>
        <p className="mt-2 text-sm text-muted-foreground text-center">
          Click the icon to upload a new photo
        </p>
      </div>

      <Accordion type="multiple" defaultValue={['basic', 'contact', 'employment', 'identification']}>
        {/* Basic Information Section */}
        <AccordionItem value="basic">
          <AccordionTrigger className="text-lg font-medium">Basic Information</AccordionTrigger>
          <AccordionContent>
            <div className="space-y-4 p-4">
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="full_name">Full Name <span className="text-red-500">*</span></Label>
                  <Input
                    id="full_name"
                    name="full_name"
                    value={formData.full_name || ''}
                    onChange={handleChange}
                    disabled={isSubmitting}
                    required
                  />
                </div>
                
                <div>
                  <Label htmlFor="email">Email Address <span className="text-red-500">*</span></Label>
                  <Input
                    id="email"
                    type="email"
                    name="email"
                    value={formData.email || ''}
                    onChange={handleChange}
                    disabled={isSubmitting}
                    required
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="gender">Gender</Label>
                  <Select 
                    value={formData.gender || ''}
                    onValueChange={(value) => {
                      setFormData(prev => ({
                        ...prev,
                        gender: value
                      }));
                    }}
                    disabled={isSubmitting}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select gender" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="male">Male</SelectItem>
                      <SelectItem value="female">Female</SelectItem>
                      <SelectItem value="other">Other</SelectItem>
                      <SelectItem value="prefer_not_to_say">Prefer not to say</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>
          </AccordionContent>
        </AccordionItem>

        {/* Contact Information */}
        <AccordionItem value="contact">
          <AccordionTrigger className="text-lg font-medium">Contact Information</AccordionTrigger>
          <AccordionContent>
            <div className="space-y-4 p-4">
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="phone">Phone Number</Label>
                  <Input
                    id="phone"
                    type="tel"
                    name="phone"
                    value={formData.phone || ''}
                    onChange={handleChange}
                    disabled={isSubmitting}
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="address">Address</Label>
                <Input
                  id="address"
                  name="address"
                  value={formData.address || ''}
                  onChange={handleChange}
                  disabled={isSubmitting}
                  className="mt-1"
                />
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                <div>
                  <Label htmlFor="city">City</Label>
                  <Input
                    id="city"
                    name="city"
                    value={formData.city || ''}
                    onChange={handleChange}
                    disabled={isSubmitting}
                  />
                </div>
                
                <div>
                  <Label htmlFor="state">State</Label>
                  <Input
                    id="state"
                    name="state"
                    value={formData.state || ''}
                    onChange={handleChange}
                    disabled={isSubmitting}
                  />
                </div>
                
                <div>
                  <Label htmlFor="country">Country</Label>
                  <Input
                    id="country"
                    name="country"
                    value={formData.country || ''}
                    onChange={handleChange}
                    disabled={isSubmitting}
                  />
                </div>
              </div>
            </div>
          </AccordionContent>
        </AccordionItem>

        {/* Employment Information */}
        <AccordionItem value="employment">
          <AccordionTrigger className="text-lg font-medium">Employment Information</AccordionTrigger>
          <AccordionContent>
            <div className="space-y-4 p-4">
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="role">Role</Label>
                  <Select 
                    value={formData.role || 'staff'} 
                    onValueChange={(value) => {
                      setFormData(prev => ({
                        ...prev,
                        role: value
                      }));
                    }}
                    disabled={isSubmitting}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select role" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="staff">Staff</SelectItem>
                      <SelectItem value="admin">Admin</SelectItem>
                      <SelectItem value="trainer">Trainer</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div>
                  <Label htmlFor="department">Department</Label>
                  <Select 
                    value={formData.department || ''} 
                    onValueChange={handleDepartmentChange}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select department" />
                    </SelectTrigger>
                    <SelectContent>
                      {departmentOptions.map((dept) => (
                        <SelectItem key={dept} value={dept}>
                          {dept}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="flex items-center space-x-2 pt-2">
                <Switch 
                  id="is_active" 
                  checked={formData.is_active ?? true} 
                  onCheckedChange={(checked) => handleSwitchChange(checked, 'is_active')} 
                />
                <Label htmlFor="is_active">Active</Label>
              </div>
              <div className="flex items-center space-x-2">
                <Switch 
                  id="is_branch_manager" 
                  checked={formData.is_branch_manager ?? false} 
                  onCheckedChange={(checked) => handleSwitchChange(checked, 'is_branch_manager')} 
                />
                <Label htmlFor="is_branch_manager">Branch Manager</Label>
              </div>
            </div>
          </AccordionContent>
        </AccordionItem>

        {/* Identification */}
        <AccordionItem value="identification">
          <AccordionTrigger className="text-lg font-medium">Identification</AccordionTrigger>
          <AccordionContent>
            <div className="space-y-4 p-4">
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="id_type">ID Type</Label>
                  <Input
                    id="id_type"
                    name="id_type"
                    value={formData.id_type || ''}
                    onChange={handleChange}
                    disabled={isSubmitting}
                  />
                </div>
                
                <div>
                  <Label htmlFor="id_number">ID Number</Label>
                  <Input
                    id="id_number"
                    name="id_number"
                    value={formData.id_number || ''}
                    onChange={handleChange}
                    disabled={isSubmitting}
                  />
                </div>
              </div>
            </div>
          </AccordionContent>
        </AccordionItem>
      </Accordion>

      {/* Form Actions */}
      <div className="flex justify-end space-x-4 pt-4">
        <Button 
          type="button" 
          variant="outline" 
          onClick={onCancel}
          disabled={isSubmitting}
          className="w-full sm:w-auto"
        >
          Cancel
        </Button>
        <Button 
          type="submit" 
          disabled={isSubmitting}
          className="w-full sm:w-auto"
        >
          {isSubmitting ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Saving...
            </>
          ) : 'Save Changes'}
        </Button>
      </div>
    </form>
  );
};

export default EditStaffForm;
