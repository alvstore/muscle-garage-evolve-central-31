
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Roles
enum UserRole {
  ADMIN
  STAFF
  TRAINER
  MEMBER
}

// Status types
enum MembershipStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  FAILED
  REFUNDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  ATTENDED
  MISSED
  BOOKED
  NO_SHOW
}

enum FitnessLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ALL
}

// Lead management
enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  LOST
  CONVERTED
}

enum LeadSource {
  WEBSITE
  REFERRAL
  WALK_IN
  PHONE
  SOCIAL_MEDIA
  EVENT
  OTHER
}

enum FunnelStage {
  COLD
  WARM
  HOT
}

enum FollowUpType {
  EMAIL
  SMS
  WHATSAPP
  CALL
  MEETING
}

// Product and inventory
enum ProductCategory {
  SUPPLEMENT
  EQUIPMENT
  APPAREL
  ACCESSORY
  MEMBERSHIP
  OTHER
}

enum ProductStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  DISCONTINUED
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  BANK_TRANSFER
  RAZORPAY
  OTHER
}

enum InventoryCategory {
  SUPPLEMENT
  EQUIPMENT
  MERCHANDISE
}

enum StockStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum NotificationChannel {
  IN_APP
  EMAIL
  SMS
  WHATSAPP
}

enum DeviceType {
  ENTRY
  EXIT
  SWIMMING
  GYM
  SPECIAL
}

enum ApiMethod {
  OpenAPI
  ISAPI
}

enum SyncStatus {
  PENDING
  SUCCESS
  FAILED
}

// Core models
model User {
  id               String             @id @default(uuid())
  email            String             @unique
  password         String?
  name             String
  role             UserRole
  phone            String?
  avatar           String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  branchId         String?
  branch           Branch?            @relation(fields: [branchId], references: [id])
  accessibleBranches UserBranchAccess[]
  profile          Profile?
  member           Member?
  trainer          Trainer?
  staff            Staff?
  admin            Admin?
  notifications    Notification[]
  createdAnnouncements Announcement[] @relation("CreatedBy")
  assignedLeads    Lead[]             @relation("AssignedTo")
  recordedMeasurements BodyMeasurement[] @relation("RecordedBy")
  conductedInventoryTransactions InventoryTransaction[] @relation("ConductedBy")
  recordedAttendance MemberAttendance[] @relation("RecordedBy")
  acknowledgedAlerts InventoryAlert[] @relation("AcknowledgedBy")
  resolvedAlerts   InventoryAlert[]   @relation("ResolvedBy")
  recordedTransactions Transaction[]  @relation("RecordedBy")
  staffAttendance  StaffAttendance[]
}

model UserBranchAccess {
  id               String    @id @default(uuid())
  userId           String
  branchId         String
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch           Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([userId, branchId])
}

model Profile {
  id               String    @id @default(uuid())
  userId           String    @unique
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  address          String?
  city             String?
  state            String?
  zipCode          String?
  country          String?   @default("India")
  dateOfBirth      DateTime?
  gender           String?
  isBranchManager  Boolean?  @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Branch {
  id               String    @id @default(uuid())
  name             String
  address          String?
  city             String?
  state            String?
  country          String?   @default("India")
  email            String?
  phone            String?
  isActive         Boolean?  @default(true)
  managerId        String?
  maxCapacity      Int?
  openingHours     String?
  closingHours     String?
  region           String?
  branchCode       String?
  taxRate          Float?
  timezone         String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  users            User[]
  userAccess       UserBranchAccess[]
  members          Member[]
  classes          Class[]
  classSchedules   ClassSchedule[]
  attendance       MemberAttendance[]
  staffAttendance  StaffAttendance[]
  memberMemberships MemberMembership[]
  expenseCategories ExpenseCategory[]
  incomeCategories IncomeCategory[]
  deviceMappings   DeviceMapping[]
  dietPlans        DietPlan[]
  measurements     BodyMeasurement[]
  transactions     Transaction[]
}

model Member {
  id               String    @id @default(uuid())
  userId           String    @unique
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  dateOfBirth      DateTime?
  goal             String?
  trainerId        String?
  trainer          Trainer?  @relation(fields: [trainerId], references: [id])
  branchId         String
  branch           Branch    @relation(fields: [branchId], references: [id])
  
  // Membership details
  membershipStatus MembershipStatus @default(INACTIVE)
  currentMembershipId String?
  currentMembership MemberMembership? @relation("CurrentMembership", fields: [currentMembershipId], references: [id])
  membershipStartDate DateTime?
  membershipEndDate DateTime?
  
  // Relations
  memberships      MemberMembership[] @relation("AllMemberships")
  classBookings    ClassBooking[]
  attendance       MemberAttendance[]
  measurements     BodyMeasurement[] @relation("MemberMeasurements")
  workoutAssignments WorkoutAssignment[]
  dietAssignments  DietAssignment[]
  trainerAssignments TrainerAssignment[] @relation("MemberAssignments")
  progress         MemberProgress?
  payments         Payment[]
  invoices         Invoice[]          @relation("MemberInvoices")
}

model Trainer {
  id               String    @id @default(uuid())
  userId           String    @unique
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialty        String?
  bio              String?
  scheduleId       String?
  rating           Float?
  
  // Relations
  members          Member[]
  classes          Class[]
  classSchedules   ClassSchedule[]
  workoutPlans     WorkoutPlan[]
  dietPlans        DietPlan[]
  trainerAssignments TrainerAssignment[] @relation("TrainerAssignments")
  memberProgress   MemberProgress[]
}

model Staff {
  id               String    @id @default(uuid())
  userId           String    @unique
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  position         String?
  department       String?
}

model Admin {
  id               String    @id @default(uuid())
  userId           String    @unique
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  superAdmin       Boolean   @default(false)
}

// Membership models
model MembershipPlan {
  id               String    @id @default(uuid())
  name             String
  description      String?
  price            Float
  durationDays     Int
  durationLabel    String?  // e.g., "1-month", "3-month"
  benefits         String[]
  allowedClasses   String?  // "all", "group-only", "basic-only"
  status           String    @default("active") // active, inactive
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  memberMemberships MemberMembership[]
}

model MemberMembership {
  id               String    @id @default(uuid())
  memberId         String
  member           Member    @relation("AllMemberships", fields: [memberId], references: [id])
  membershipId     String
  membership       MembershipPlan @relation(fields: [membershipId], references: [id])
  startDate        DateTime
  endDate          DateTime
  status           String    @default("active") // active, expired, cancelled
  autoRenew        Boolean   @default(false)
  paymentStatus    PaymentStatus @default(PENDING)
  totalAmount      Float
  amountPaid       Float?    @default(0)
  notes            String?
  branchId         String?
  branch           Branch?   @relation(fields: [branchId], references: [id])
  trainerId        String?
  trainer          Trainer?  @relation(fields: [trainerId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  currentForMember Member?   @relation("CurrentMembership")
  payments         Payment[]
  invoices         Invoice[]
}

// Class and schedule models
model Class {
  id               String    @id @default(uuid())
  name             String
  description      String?
  trainerId        String?
  trainer          Trainer?  @relation(fields: [trainerId], references: [id])
  capacity         Int
  enrolled         Int       @default(0)
  startTime        DateTime
  endTime          DateTime
  type             String
  location         String?
  recurrence       String?
  isActive         Boolean   @default(true)
  branchId         String?
  branch           Branch?   @relation(fields: [branchId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  bookings         ClassBooking[]
}

model ClassSchedule {
  id               String    @id @default(uuid())
  name             String
  description      String?
  trainerId        String
  trainer          Trainer   @relation(fields: [trainerId], references: [id])
  type             String
  difficulty       String
  capacity         Int
  enrolled         Int       @default(0)
  location         String
  startTime        DateTime
  endTime          DateTime
  recurring        Boolean   @default(false)
  recurringPattern String?
  status           String    @default("scheduled") // scheduled, cancelled, completed
  branchId         String?
  branch           Branch?   @relation(fields: [branchId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  bookings         ClassBooking[]
}

model ClassBooking {
  id               String    @id @default(uuid())
  classId          String?
  class            Class?    @relation(fields: [classId], references: [id])
  scheduleId       String?
  schedule         ClassSchedule? @relation(fields: [scheduleId], references: [id])
  memberId         String
  member           Member    @relation(fields: [memberId], references: [id])
  bookingDate      DateTime  @default(now())
  status           BookingStatus
  attended         Boolean   @default(false)
  attendanceTime   DateTime?
  notes            String?
  paidAmount       Float?
  paymentStatus    String?
  razorpayOrderId  String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// Attendance models
model MemberAttendance {
  id               String    @id @default(uuid())
  memberId         String
  member           Member    @relation(fields: [memberId], references: [id])
  branchId         String?
  branch           Branch?   @relation(fields: [branchId], references: [id])
  checkIn          DateTime  @default(now())
  checkOut         DateTime?
  accessMethod     String    @default("manual") // manual, rfid, fingerprint
  deviceId         String?
  recordedBy       String?
  recorder         User?     @relation("RecordedBy", fields: [recordedBy], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model StaffAttendance {
  id               String    @id @default(uuid())
  staffId          String
  staff            User      @relation(fields: [staffId], references: [id])
  branchId         String?
  branch           Branch?   @relation(fields: [branchId], references: [id])
  checkIn          DateTime?
  checkOut         DateTime?
  status           String    @default("present") // present, absent, late, half-day
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// Fitness tracking models
model WorkoutPlan {
  id               String    @id @default(uuid())
  name             String
  description      String?
  trainerId        String
  trainer          Trainer   @relation(fields: [trainerId], references: [id])
  memberId         String?
  difficulty       String    // beginner, intermediate, advanced
  isGlobal         Boolean   @default(false)
  isCustom         Boolean   @default(true)
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  workoutDays      WorkoutDay[]
  assignments      WorkoutAssignment[]
}

model WorkoutDay {
  id               String    @id @default(uuid())
  name             String
  dayLabel         String?
  description      String?
  notes            String?
  workoutPlanId    String
  workoutPlan      WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  exercises        Exercise[]
}

model Exercise {
  id               String    @id @default(uuid())
  name             String
  sets             Int
  reps             Int
  weight           Float?
  rest             Int?
  restTime         String?
  notes            String?
  mediaUrl         String?
  muscleGroupTag   String?
  workoutDayId     String
  workoutDay       WorkoutDay @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model WorkoutAssignment {
  id               String    @id @default(uuid())
  planId           String
  plan             WorkoutPlan @relation(fields: [planId], references: [id])
  memberId         String
  member           Member    @relation(fields: [memberId], references: [id])
  trainerId        String
  trainer          Trainer   @relation(fields: [trainerId], references: [id])
  assignedAt       DateTime  @default(now())
  startDate        DateTime
  endDate          DateTime?
  isActive         Boolean   @default(true)
}

model DietPlan {
  id               String    @id @default(uuid())
  name             String
  dietType         String?
  description      String?
  dailyCalories    Int?
  proteinRatio     Float?
  carbsRatio       Float?
  fatRatio         Float?
  notes            String?
  isCustom         Boolean   @default(true)
  isGlobal         Boolean   @default(false)
  goal             String?
  memberId         String?
  trainerId        String
  trainer          Trainer   @relation(fields: [trainerId], references: [id])
  branchId         String?
  branch           Branch?   @relation(fields: [branchId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  mealPlans        MealPlan[]
  assignments      DietAssignment[]
}

model MealPlan {
  id               String    @id @default(uuid())
  name             String
  time             String?
  dietPlanId       String
  dietPlan         DietPlan  @relation(fields: [dietPlanId], references: [id], onDelete: Cascade)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  mealItems        MealItem[]
}

model MealItem {
  id               String    @id @default(uuid())
  name             String
  calories         Int?
  protein          Float?
  carbs            Float?
  fats             Float?
  mealPlanId       String
  mealPlan         MealPlan  @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model DietAssignment {
  id               String    @id @default(uuid())
  memberId         String
  member           Member    @relation(fields: [memberId], references: [id])
  dietPlanId       String
  dietPlan         DietPlan  @relation(fields: [dietPlanId], references: [id])
  trainerId        String
  trainer          Trainer   @relation(fields: [trainerId], references: [id])
  assignedDate     DateTime  @default(now())
  startDate        DateTime
  endDate          DateTime?
  status           String    @default("active") // active, completed, cancelled
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model BodyMeasurement {
  id               String    @id @default(uuid())
  memberId         String
  member           Member    @relation("MemberMeasurements", fields: [memberId], references: [id])
  measurementDate  DateTime  @default(now())
  height           Float?
  weight           Float?
  bmi              Float?
  bodyFatPercentage Float?
  chest            Float?
  waist            Float?
  hips             Float?
  arms             Float?
  thighs           Float?
  recordedBy       String?
  recorder         User?     @relation("RecordedBy", fields: [recordedBy], references: [id])
  notes            String?
  branchId         String?
  branch           Branch?   @relation(fields: [branchId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model MemberProgress {
  id               String    @id @default(uuid())
  memberId         String    @unique
  member           Member    @relation(fields: [memberId], references: [id])
  trainerId        String
  trainer          Trainer   @relation(fields: [trainerId], references: [id])
  weight           Float?
  fatPercent       Float?
  bmi              Float?
  muscleMass       Float?
  workoutCompletionPercent Int?
  dietAdherencePercent Int?
  created_at       DateTime  @default(now())
  lastUpdated      DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// Trainer assignments
model TrainerAssignment {
  id               String    @id @default(uuid())
  trainerId        String
  trainer          Trainer   @relation("TrainerAssignments", fields: [trainerId], references: [id])
  memberId         String
  member           Member    @relation("MemberAssignments", fields: [memberId], references: [id])
  startDate        DateTime
  endDate          DateTime?
  isActive         Boolean   @default(true)
  branchId         String?
  branch           Branch?   @relation(fields: [branchId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// Finance models
model Invoice {
  id               String    @id @default(uuid())
  memberId         String
  member           Member    @relation("MemberInvoices", fields: [memberId], references: [id])
  memberName       String
  amount           Float
  status           String    // pending, paid, partial, cancelled, overdue
  issuedDate       DateTime
  dueDate          DateTime
  paidDate         DateTime?
  membershipId     String?
  membership       MemberMembership? @relation(fields: [membershipId], references: [id])
  description      String?
  paymentMethod    String?
  notes            String?
  branchId         String?
  razorpayOrderId  String?
  razorpayPaymentId String?
  
  // Relations
  items            InvoiceItem[]
  payments         Payment[]
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model InvoiceItem {
  id               String    @id @default(uuid())
  invoiceId        String
  invoice          Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  name             String
  quantity         Int
  unitPrice        Float
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Payment {
  id               String    @id @default(uuid())
  amount           Float
  currency         String    @default("INR")
  status           String    // pending, completed, failed, refunded
  mode             String    // cash, card, upi, bank_transfer, razorpay, other
  memberId         String
  member           Member    @relation(fields: [memberId], references: [id])
  membershipId     String?
  membership       MemberMembership? @relation(fields: [membershipId], references: [id])
  invoiceId        String?
  invoice          Invoice?  @relation(fields: [invoiceId], references: [id])
  transactionId    String?
  razorpayPaymentId String?
  razorpayOrderId  String?
  metadata         Json?
  branchId         String?
  staffId          String?
  notes            String?
  paymentDate      DateTime  @default(now())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Transaction {
  id               String    @id @default(uuid())
  type             TransactionType
  amount           Float
  transactionDate  DateTime  @default(now())
  categoryId       String?
  description      String?
  reference        String?
  paymentMethod    String?
  transactionId    String?
  recordedBy       String?
  recorder         User?     @relation("RecordedBy", fields: [recordedBy], references: [id])
  branchId         String?
  branch           Branch?   @relation(fields: [branchId], references: [id])
  referenceId      String?  // Reference to another entity (invoice, payment, etc.)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model ExpenseCategory {
  id               String    @id @default(uuid())
  name             String
  description      String?
  isActive         Boolean   @default(true)
  branchId         String?
  branch           Branch?   @relation(fields: [branchId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model IncomeCategory {
  id               String    @id @default(uuid())
  name             String
  description      String?
  isActive         Boolean   @default(true)
  branchId         String?
  branch           Branch?   @relation(fields: [branchId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// Inventory models
model InventoryItem {
  id               String    @id @default(uuid())
  name             String
  sku              String
  category         InventoryCategory
  description      String?
  quantity         Int
  price            Float
  costPrice        Float
  supplier         String?
  supplierContact  String?
  manufactureDate  String?
  expiryDate       String?
  reorderLevel     Int
  location         String?
  image            String?
  barcode          String?
  status           StockStatus
  lastStockUpdate  DateTime
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  transactions     InventoryTransaction[]
  alerts           InventoryAlert[]
}

model InventoryTransaction {
  id               String    @id @default(uuid())
  itemId           String
  item             InventoryItem @relation(fields: [itemId], references: [id])
  itemName         String
  type             String    // stock-in, stock-out, adjustment, return, damaged
  quantity         Int
  previousQuantity Int
  newQuantity      Int
  notes            String?
  conductedBy      String
  conductor        User      @relation("ConductedBy", fields: [conductedBy], references: [id])
  conductedAt      DateTime
  relatedInvoiceId String?
  batchNumber      String?
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model InventoryAlert {
  id               String    @id @default(uuid())
  itemId           String
  item             InventoryItem @relation(fields: [itemId], references: [id])
  itemName         String
  type             String    // low-stock, expiring-soon, expired, out-of-stock
  message          String
  status           String    @default("active") // active, acknowledged, resolved
  acknowledgedBy   String?
  acknowledger     User?     @relation("AcknowledgedBy", fields: [acknowledgedBy], references: [id])
  acknowledgedAt   DateTime?
  resolvedBy       String?
  resolver         User?     @relation("ResolvedBy", fields: [resolvedBy], references: [id])
  resolvedAt       DateTime?
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Supplier {
  id               String    @id @default(uuid())
  name             String
  contactPerson    String
  email            String?
  phone            String
  address          String?
  items            String[]  // Array of itemIds
  paymentTerms     String?
  status           String    @default("active") // active, inactive
  notes            String?
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// Store models
model Product {
  id               String    @id @default(uuid())
  name             String
  description      String
  price            Float
  salePrice        Float?
  category         ProductCategory
  status           ProductStatus
  stock            Int
  inventoryId      String?   // Reference to inventory item
  sku              String
  barcode          String?
  images           String[]
  features         String[]
  brand            String?
  featured         Boolean   @default(false)
  
  // Relations
  orderItems       OrderItem[]
  reviews          Review[]
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Order {
  id               String    @id @default(uuid())
  memberId         String?
  customerName     String
  customerEmail    String?
  customerPhone    String?
  subtotal         Float
  discount         Float?
  promoCodeId      String?
  promoCode        String?
  tax              Float
  total            Float
  status           OrderStatus
  paymentMethod    PaymentMethod
  paymentStatus    String    // pending, paid, failed, refunded
  completedAt      DateTime?
  notes            String?
  staffId          String?
  
  // Relations
  items            OrderItem[]
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model OrderItem {
  id               String    @id @default(uuid())
  orderId          String
  order            Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId        String
  product          Product   @relation(fields: [productId], references: [id])
  quantity         Int
  price            Float
  discount         Float?
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Review {
  id               String    @id @default(uuid())
  productId        String
  product          Product   @relation(fields: [productId], references: [id])
  memberId         String
  rating           Int
  comment          String?
  helpful          Int       @default(0)
  reported         Boolean   @default(false)
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// Marketing models
model PromoCode {
  id               String    @id @default(uuid())
  code             String    @unique
  description      String
  type             String    // percentage, fixed, free-product
  value            Float
  minPurchaseAmount Float?
  maxDiscountAmount Float?
  startDate        DateTime
  endDate          DateTime
  status           String    // active, inactive, expired, scheduled
  usageLimit       Int?
  currentUsage     Int       @default(0)
  applicableProducts String[] // product IDs or "all"
  applicableMemberships String[] // membership IDs or "all"
  createdBy        String
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Referral {
  id               String    @id @default(uuid())
  referrerId       String    // Member who referred
  referrerName     String
  referredEmail    String
  referredName     String?
  referredId       String?   // New member ID if converted
  status           String    // pending, approved, rejected, rewarded
  promoCodeId      String?
  promoCode        String?
  convertedAt      DateTime?
  rewardAmount     Float?
  rewardDescription String?
  rewardStatus     String?   // pending, processed, cancelled
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model ReferralProgram {
  id               String    @id @default(uuid())
  name             String
  description      String
  rewardType       String    // fixed, percentage, product, membership-extension
  rewardValue      Float
  rewardProductId  String?
  extensionDays    Int?
  isActive         Boolean   @default(true)
  startDate        DateTime
  endDate          DateTime?
  terms            String?
  createdBy        String
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// CRM models
model Lead {
  id               String    @id @default(uuid())
  name             String
  email            String?
  phone            String?
  source           LeadSource
  status           LeadStatus
  funnelStage      FunnelStage
  assignedTo       String?
  assignedUser     User?     @relation("AssignedTo", fields: [assignedTo], references: [id])
  notes            String?
  followUpDate     DateTime?
  lastContactDate  DateTime?
  conversionDate   DateTime?
  conversionValue  Float?
  interests        String[]
  tags             String[]
  
  // Relations
  followUpHistory  FollowUpHistory[]
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model FollowUpTemplate {
  id               String    @id @default(uuid())
  title            String
  type             FollowUpType
  content          String
  variables        String[]
  createdBy        String
  isDefault        Boolean?  @default(false)
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model FollowUpHistory {
  id               String    @id @default(uuid())
  leadId           String
  lead             Lead      @relation(fields: [leadId], references: [id])
  templateId       String?
  type             FollowUpType
  content          String
  sentBy           String
  sentAt           DateTime
  status           String    // sent, delivered, read, failed
  response         String?
  responseAt       DateTime?
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// Communication models
model Announcement {
  id               String    @id @default(uuid())
  title            String
  content          String
  authorId         String
  author           User      @relation("CreatedBy", fields: [authorId], references: [id])
  authorName       String
  priority         String    @default("medium") // low, medium, high
  targetRoles      String[]
  channels         NotificationChannel[]
  sentCount        Int?      @default(0)
  expiresAt        DateTime?
  forBranchIds     String[]
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Feedback {
  id               String    @id @default(uuid())
  memberId         String?
  memberName       String?
  type             String    // general, trainer, class, fitness-plan
  relatedId        String?
  rating           Int
  comments         String
  anonymous        Boolean   @default(false)
  title            String
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Notification {
  id               String    @id @default(uuid())
  userId           String
  user             User      @relation(fields: [userId], references: [id])
  title            String
  message          String
  type             NotificationType
  read             Boolean   @default(false)
  link             String?
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model MotivationalMessage {
  id               String    @id @default(uuid())
  title            String?
  content          String
  author           String?
  category         String    // motivation, fitness, nutrition, wellness
  tags             String[]
  active           Boolean   @default(true)
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model ReminderRule {
  id               String    @id @default(uuid())
  name             String
  description      String?
  triggerType      String    // membership_expiry, missed_attendance, birthday, inactive_member, special_event
  triggerValue     Int
  triggerDays      Int?
  message          String
  sendVia          NotificationChannel[]
  type             String?
  targetRoles      String[]
  active           Boolean   @default(true)
  enabled          Boolean?  @default(true)
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// Settings models
model GlobalSettings {
  id               String    @id @default(uuid()) @default(dbgenerated("gen_random_uuid()"))
  currency         String    @default("INR")
  currencySymbol   String    @default("₹")
  dateFormat       String    @default("DD/MM/YYYY")
  timeFormat       String    @default("24h")
  
  // Payment Gateway Settings
  razorpayKeyId    String?
  razorpayKeySecret String?
  
  // Communication Settings
  emailProvider    String?
  emailApiKey      String?
  smsProvider      String?
  smsApiKey        String?
  whatsappProvider String?
  whatsappApiKey   String?
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model PaymentSettings {
  id               String    @id @default(uuid())
  gatewayName      String
  isEnabled        Boolean   @default(false)
  config           Json
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// Access control and device models
model DeviceMapping {
  id               String    @id @default(uuid())
  branchId         String
  branch           Branch    @relation(fields: [branchId], references: [id])
  deviceId         String
  deviceName       String
  deviceType       DeviceType
  deviceSerial     String
  deviceLocation   String
  isActive         Boolean   @default(true)
  apiMethod        ApiMethod
  ipAddress        String?
  port             String?
  username         String?
  password         String?
  useISAPIFallback Boolean?  @default(false)
  lastSuccessfulSync DateTime?
  lastFailedSync   DateTime?
  syncStatus       SyncStatus?
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}
